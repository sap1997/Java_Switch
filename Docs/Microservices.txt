
1. What are microservices?
2. What are the key features of microservice architecture?
3. How are microservices different from monolithic architecture?
4. What are the advantages and disadvantages of microservices?
5. What challenges do microservices introduce?
6. What is Spring Boot and why is it used in microservices?
7. What is Spring Cloud and how does it help in microservices architecture?
8. How do you create a simple microservice using Spring Boot?
9. What is the role of @RestController in microservices?
10. How does Spring Boot handle dependency injection in microservices?
11. How do microservices communicate with each other?
12. What is REST and why is it used in microservices?
13. What is Feign Client and how does it simplify REST communication?
14. What is a service registry and discovery? How is Eureka used for it?
15. How does Load Balancing work with Ribbon or Spring Cloud LoadBalancer?
16. What is Circuit Breaker pattern? How is it implemented using Resilience4j or Hystrix?
17. How do you handle failures in microservices?
18. How do you secure communication between microservices?
19. What is OAuth2 and how is it used in securing microservices?
20. How do you handle database per microservice?
21. How do microservices handle transactions across multiple services (Saga pattern, 2PC)?
22. What is containerization? How does Docker help in microservices deployment?
23. How do you manage configuration in microservices (Spring Cloud Config)?
24. What tools do you use for logging, monitoring, and tracing (like ELK, Zipkin, Sleuth)?
25. How would you deploy and scale microservices in production (Kubernetes, Docker Compose)?
