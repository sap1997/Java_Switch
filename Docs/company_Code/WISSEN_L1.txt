class Student {
private
  Integer id;
 
private
  String name;
 
public
  Student(Integer id, String name) {
    this.id = id;
    this.name = name;
  }
}
 
public class TestCollection {
public
  static void main(String args[]) {
    List<Student> studentList = new ArrayList<>();
    studentList.add(new Student(1, "Krisha"));
    studentList.add(new Student(2, "Aarya"));
    studentList.add(new Student(3, "Tisha"));
    studentList.add(new Student(3, "Ishana"));
 
    Map<Integer, String> studentMap = null;

	studentMap = studentList.stream().collect(Collectors.toMap(Map.EntrySet:getid,LinkedHashMap::new,Map.EntrySet:getName));
 
    studentMap.forEach((x, y)->System.out.println("Student ID : " + x +
                                                  ", Student Name : " + y));
  }
}



class Parent1 {
  static int x = 10;
  static void staticMethod() {
    x++;
    System.out.println("Value of X in Parent : " + x);
  }
}
 
class Child1 extends Parent1 {
  static void staticMethod() {
    x++;
    System.out.println("Value of X in Child : " + x);
  }
}
 
public class StaticMethodTest {
public
  static void main(String[] args) {
    Parent1.staticMethod(); //("Value of X in Parent : " +11)
    Child1.staticMethod(); ////("Value of X in Child : " +12)

    Parent1 parent = new Child1();
    parent.staticMethod(); //Value of X in Parent : 13)
  }
}




class MultiThreadHandle {
public
  synchronized void test1() {
    System.out.println("Inside Test1 Method");
    while (true) {
      try {
        Thread.sleep(Long.MAX_VALUE);
      } catch (InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
public
  static synchronized void test2() {
    System.out.println("Inside Test2 Method");
    while (true) {
      try {
        Thread.sleep(Long.MAX_VALUE);
      } catch (InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
}
 
public class ThreadTest {
public
  static void main(String args[]) {
    MultiThreadHandle obj = new MultiThreadHandle();
    ExecutorService executor = Executors.newFixedThreadPool(10);
 
    Runnable runnableTask1 = ()->{ obj.test1(); };
    Runnable runnableTask2 = ()->{ obj.test2(); };
 
    executor.execute(runnableTask1);
    executor.execute(runnableTask2);
  }
}




Write a SQL query to find the top 5 bestselling books (based on the total number of copies sold) along with their titles and the total number of copies sold for each book.
 
Books: book_id		title					author			genre	price 
1			To Kill a Mockingbird	Harper Lee		Fiction	10.99
 2			1984				George Orwell	Fiction	9.99 3			The Great Gatsby		F.Fitzgerald	Fiction	11.5 4			The Catcher in the Rye J.D. Salinger	Fiction	12.25 5			Pride and Prejudice	Jane Austen		Fiction	8.99 6			The Hobbit			J.R.R. Tolkien	Fantasy	14.99 7			Harry Potter			J.K. Rowling	Fantasy	13.75 8			The Da Vinci Code	Dan Brown		Mystery	11.99 9			Gone with the Wind	M.Mitchell		Romance	10.5 10			The Alchemist		Paulo Coelho	Fiction	9.25

Orders: order_id	customer_id	book_id	quantity	order_date 1			101			1		2			2023-01-05 2			102			2		3			2023-01-10 3			103			3		3			2023-01-15 4			104			4		2			2023-01-20 5			105			5		3			2023-01-25 6			101			1		1			2023-02-05 7			102			2		2			2023-02-10 8			103			6		3			2023-02-15 9			104			3		1			2023-02-20 10			105			10		2			2023-02-25



book--book_id,title,author,genre,price
order-- order_id,customer_id,book_id,quantity,order_date




SELECT B.TITLE,SUM(O.QUANTITY) AS COPIES FROM BOOKS B
INNER JOIN ORDERS O ON B.BOOK_ID = O.BOOK_ID
GROUP BY B.TITLE
ORDER BY COPIES DESC
LIMIT 5;


 