List<Students> student == sort as per marks


List<Students>sortedstudents = student.stream().sorted(Comparator.ComparingInt(Student::getMarks))
				.collect(Collectors.toList());



public class Employee
{
	int id=1;
	String name = Ravi;

public int hashcode()
{
	return Object.hash(id);
}
public Boolean Equals(O


Employee a;
Employee b;

Set<Employee> employee = new HashSet<>();
 



employee.add(a);



Model(Dao/entity classes) -- view(layer for frontend users) -- controller(business logic)


view -> controller -> model


Call from frontend -> dynamic dispatcher -> Controller Layer(Buisness Logic and output)
			->Service Layer(methods needed in Ctonroller layer defined)
			-> Repostitory layer(Extendin


A->B->C->D(failure)



class Base {
 
    int a = 10;
    public void setInt(int a) {
          this.a = a;
    }
 
}
 
class Delivery extends Base {
 
    public void display() {
        System.out.println(a);
    }
 
}
 
Base a = new Delivery();
 
a.diplay();//10




a = {1,4,7,2,3,1,1,3,3,4,4} Example 1 -2

Map<Integer,Long> = Arrays.asStream(a).collect(Collectors.groupingBy(c->c,Collectors.Counting());

Map<Integer,Integer> result = new HashMap<>();

for(int i : a)
{
	result.put(i,result.getOrDefault(0,i)+1);
}

	






